
; Modifying this file:
; You should not modify this file except to make bugfixes or
; for other "maintenance".  If you want to make custom changes,
; you should create a new datadir subdirectory and copy this file
; into that directory, and then modify that copy.  Then use the
; command "rulesetdir <mysubdir>" in the server to have freeciv
; use your new customized file.

; Note that the freeciv AI may not cope well with anything more
; than minor changes.

[datafile]
description="Civ2Civ3 tile_type data for Freeciv"
options="+Freeciv-2.5-ruleset"

[control]
; Names for custom terrain flags. There can be up to 8 of these.
; name          = rule name; In some circumstances user may see this
;                 as part of some sentences, so try to make it descriptive
;                 and sensible.
; helptxt       = displayed in the help for terrains with this flag (optional)
;flags =
;  { "name", "helptxt"
;  }

[parameters]

; Percentage of "land" tiles required to be adjacent to a water tile before
; it may be "reclaimed" into a land tile (0-101; 0=anywhere, default 101=nowhere)
ocean_reclaim_requirement = 30

; Percentage of "water" tiles required to be adjacent to a land tile before
; it may be "channeled" into a water tile (0-101; 0=anywhere, default 101=nowhere)
land_channel_requirement = 10

; Bodies of water up to this size are considered freshwater lakes, if there is
; also terrain type(s) with flag "FreshWater" in the ruleset.
lake_max_size = 14

; How many native tiles first startunit must be able to reach.
; 0 to disable check.
min_start_native_area = 0

; How many fragments each movement point has.
; For example road movement costs are relative to this.
move_fragments = 6

; How many move_fragments IgTer unit movement costs
igter_cost = 2

; There is no resources in the middle of the oceans, only near coast
ocean_resources = FALSE

; percent subtracted from food production if tile is polluted
pollution_food_penalty=50

; percent subtracted from shield production if tile is polluted
pollution_shield_penalty=50

; percent subtracted from trade production if tile is polluted
pollution_trade_penalty=50

; percent subtracted from food production if tile has fallout
fallout_food_penalty=50

; percent subtracted from shield production if tile has fallout
fallout_shield_penalty=50

; percent subtracted from trade production if tile has fallout
fallout_trade_penalty=50

; /* <-- avoid gettext warnings
;
; The individual terrain types, one per section.
; Roughly sorted by identifier.
; The actual tag used (the * in [terrain_*]) must be unique for each terrain,
; should contain the specific strings found in the nation city_name lists,
; and may be used in debug output when reading this file.
; Some have been chosen to avoid the city_name lists (_peaks, _water).
;
; Notes:
;
; name                 = translatable name as seen by user; if "unused", it is
;                        not used, but is included for conversion and/or the
;                        editor.
; rule_name            = (optional) name for savegames, rulesets etc; if not
;                        present, 'name' is used. Since the name used in
;                        savegames must not change, use this when renaming a
;                        terrain after a ruleset has been released.
; graphic              = preferred graphic [tile_*] in tilespec.
; graphic_alt          = alternate graphic [tile_*] when preferred is not found;
;                        otherwise may be "-"
; identifier           = single-character identifier used in savegames.  This
;                        must be unique for each terrain, and changing it will
;                        break savegame compatibility.
; class                = Terrain class terrain belongs to: "Land" or "Oceanic"
; movement_cost        = in whole movement points, not move_fragments;
;                        typically 1 to 3
; defense_bonus        = percent added to defense; typically 0% to 200%
; food                 = normal food production
; shield               = normal shield production
; trade                = normal trade production
; resources            = list of possible resources on this terrain
; road_food_incr_pct   = percent of road food_incr applied to this terrain
; road_shield_incr_pct = percent of road shield_incr applied to this terrain
; road_trade_incr_pct  = percent of road trade_incr applied to this terrain
; base_time            = time to build bases; if 0, cannot build any bases.
;                        Nonzero values only affect bases with build_time 0.
; road_time            = time to build roads; if 0, cannot build any roads.
;                        Nonzero values only affect roads with build_time 0.
; irrigation_result    = result of irrigation; one of:
;                        "no"  -- cannot irrigate
;                        "yes" -- can irrigate
;                        terrain section -- irrigation changes to that terrain
; irrigation_food_incr = increment to food if tile is irrigated
; irrigation_time      = time to irrigate; if 0, cannot irrigate
; mining_result        = result of mining; one of:
;                        "no"  -- cannot mine
;                        "yes" -- can mine
;                        terrain section -- mining changes to that terrain
; mining_shield_incr   = increment to shields if tile is mined
; mining_time          = time to mine; if 0, cannot mine
; transform_result     = result of transformation; one of:
;                        "no"  -- cannot transform
;                        terrain section -- transformation changes to that
;                          terrain
; transform_time       = time to transform; if 0, cannot transform
; clean_pollution_time = time to clean pollution
; clean_fallout_time   = time to clean fallout
; warmer_wetter_result = result of global warming for wet terrains; one of:
;                        "no"  -- no change; does not count for warming
;                        "yes" -- no change; counts for warming
;                        terrain section -- warming changes to that terrain
; warmer_drier_result  = result of global warming for dry terrains;
;                        see warmer_wetter_result
; cooler_wetter_result = result of nuclear winter for wet terrains;
;                        see warmer_wetter_result
; cooler_drier_result  = result of nuclear winter for dry terrains;
;                        see warmer_wetter_result
; native_to            = List of unit classes that can move here
; flags                = General flags for this terrain. List taken from the
;                        following, and/or any user flags defined above:
;   - NoBarbs          = Barbarians will not be spawned here.
;   - NoCities         = Cities may not be built or found on this terrain.
;   - NoPollution      = Pollution and Fallout will not be put on this
;                        terrain type.
;   - Starter          = Players will only be started on "Starter" terrain.
;                        (Currently this cannot be Oceanic terrain.)
;   - CanHaveRiver     = Set to 1 if this terrain can have river on it (the
;                        actual chance of river generation is controlled
;                        separately).
;   - UnsafeCoast      = This terrain does not provide a safe voyage for
;                        units with flag "Trireme"
;   - FreshWater       = This terrain is used for small bodies of water.
;                        If this becomes adjacent to non-FreshWater terrain,
;                        the whole contiguous FreshWater area will be flooded
;                        with the non-FreshWater terrain.
;   - NotGenerated     = Map generator never places this terrain type. It can
;                        be added from editor only, or by ingame events
;                        (lua scripting)
; property_*           = specific property % values used by mapgen.  Most
;                        terrains will have 0 for most values.
;  - mountainous       = degree to which this terrain is mountainous
;  - green             = how much life this terrain has
;  - foliage           = how much thick undergrowth the terrain has 
;  - tropical          = how "tropical" the terrain is (high temperature)
;  - temperate         = how "temperate" the terrain is (med temperature)
;  - cold              = how "cold" the terrain is (low temperature)
;  - frozen            = how "frozen" the terrain is (very low temperature)
;  - wet               = how "wet" the terrain is (moisture)
;  - dry               = how "dry" the terrain is (moisture)
;  - ocean_depth       = the depth of an ocean, as an average level
; color.r              = color of the terrain (red value)
; color.g              = color of the terrain (green value)
; color.b              = color of the terrain (blue value)
; helptext             = optional help text string; should escape all raw
;                        newlines so that xgettext parsing works
;
; */ <-- avoid gettext warnings

[terrain_inaccesible]
name                 = _("Inaccessible")
graphic              = "inaccessible"
graphic_alt          = "arctic"
identifier           = "i"
class                = "Land"
movement_cost        = 0
defense_bonus        = 0
food                 = 0
shield               = 0
trade                = 0
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 0
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "no"
transform_time       = 0
clean_pollution_time = 0
clean_fallout_time   = 0
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
flags                = "NotGenerated", "NoPollution", "NoCities", "UnsafeCoast"
color.r              = 25
color.g              = 25
color.b              = 25
helptext             = _("\
No unit can enter this terrain, nor can any city work its tiles.\
")

[terrain_lake]
name                 = _("Lake")
graphic              = "lake"
graphic_alt          = "coast"
identifier           = "+"
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 2
shield               = 0
trade                = 2
resources            = "resource_fish"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "terrain_grassland"
transform_time       = 36
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "terrain_swamp"
cooler_wetter_result = "terrain_glacier"
cooler_drier_result  = "terrain_tundra"
native_to            = "Sea", "Air", "Missile", "Helicopter", "Trireme"
flags                = "NoCities", "NoBarbs", "NoPollution", "FreshWater"
property_ocean_depth = 0
color.r              = 46
color.g              = 120
color.b              = 182
helptext             = _("\
Lakes are substantial bodies of fresh water.\
")

[terrain_ocean]
name                 = _("Ocean")
graphic              = "coast"
graphic_alt          = "-"
identifier           = " "
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 2
resources            = "resource_fish", "resource_whales"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "terrain_swamp"
transform_time       = 36
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_deep_ocean"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "terrain_glacier"
native_to            = "Sea", "Air", "Missile", "Helicopter", "Trireme"
flags                = "NoCities", "UnsafeCoast"
property_ocean_depth = 32
color.r              = 0
color.g              = 46
color.b              = 137
helptext             = _("\
Shallow oceans are mostly found near coastlines, and are often rich\
 sources of food and other resources.\
")

[terrain_deep_ocean]
name                 = _("Deep Ocean")
graphic              = "floor"
graphic_alt          = "coast"
identifier           = ":"
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 2
;resources            = "none"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "no"
transform_time       = 0
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Sea", "Air", "Missile", "Helicopter"
flags                = "NoCities", "NoPollution", "UnsafeCoast"
property_ocean_depth = 87
color.r              = 0
color.g              = 33
color.b              = 129
helptext             = _("\
Deep oceans cover much of the world away from coastlines, and only\
 seaworthy units (not including Triremes) can travel on them.\
")

[terrain_glacier]
name                 = _("Glacier")
graphic              = "arctic"
graphic_alt          = "-"
identifier           = "a"
class                = "Land"
movement_cost        = 2
defense_bonus        = 0
food                 = 0
shield               = 0
trade                = 0
resources            = "resource_icy_ivory", "resource_oil"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 10
transform_result     = "terrain_lake"
transform_time       = 36
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_lake"
warmer_drier_result  = "terrain_tundra"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "NoBarbs", "NoCities", "CanHaveRiver"
property_frozen      = 100
color.r              = 232
color.g              = 232
color.b              = 232
helptext             = _("\
Glaciers are found only in the most northerly or southerly\
 reaches of the world.  They are very cold, and hence difficult to\
 work with.\
")

[terrain_desert]
name                 = _("Desert")
graphic              = "desert"
graphic_alt          = "-"
identifier           = "d"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 0
shield               = 1
trade                = 0
resources            = "resource_oasis", "resource_oil"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 5
transform_result     = "terrain_plains"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_swamp"
warmer_drier_result  = "no"
cooler_wetter_result = "terrain_tundra"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "CanHaveRiver"
property_dry         = 100
property_tropical    = 50
property_temperate   = 20
color.r              = 214
color.g              = 185
color.b              = 106
helptext             = _("\
Deserts are regions of extreme dryness, making agriculture and\
 trade very difficult.\
"), _("\
Rivers bring fertile soil to deserts; on a desert river not already\
 benefiting from an oasis, building irrigation will yield two extra food\
 resources rather than the usual one.\
")

[terrain_forest]
name                 = _("Forest")
graphic              = "forest"
graphic_alt          = "-"
identifier           = "f"
class                = "Land"
movement_cost        = 2
defense_bonus        = 25
food                 = 1
shield               = 2
trade                = 0
resources            = "resource_pheasant", "resource_silk"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "terrain_plains"
irrigation_food_incr = 0
irrigation_time      = 10
mining_result        = "terrain_grassland"
mining_shield_incr   = 0
mining_time          = 15
transform_result     = "terrain_hills"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_jungle"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "Starter", "CanHaveRiver", "NoPollution"
property_cold        = 20
property_wet         = 20
property_foliage     = 50
property_temperate   = 50
color.r              = 43
color.g              = 107
color.b              = 19
helptext             = _("\
Forests are densely wooded, making agriculture somewhat\
 problematic.\
")

[terrain_grassland]
name                 = _("Grassland")
graphic              = "grassland"
graphic_alt          = "-"
identifier           = "g"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 2
shield               = 0
trade                = 0
resources            = "resource_bonus"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "terrain_forest"
mining_shield_incr   = 0
mining_time          = 15
transform_result     = "terrain_hills"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_swamp"
warmer_drier_result  = "terrain_desert"
cooler_wetter_result = "terrain_tundra"
cooler_drier_result  = "terrain_tundra"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "Starter", "CanHaveRiver"
property_green       = 50
property_temperate   = 50
color.r              = 11
color.g              = 138
color.b              = 4
helptext             = _("\
Grasslands afford exceptional agricultural opportunities.\
")

[terrain_hills]
name                 = _("Hills")
graphic              = "hills"
graphic_alt          = "-"
identifier           = "h"
class                = "Land"
movement_cost        = 2
defense_bonus        = 50
food                 = 1
shield               = 1
trade                = 0
resources            = "resource_coal", "resource_wine"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 10
mining_result        = "yes"
mining_shield_incr   = 2
mining_time          = 10
transform_result     = "terrain_plains"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "Starter", "CanHaveRiver"
property_green       = 50
property_mountainous = 30
color.r              = 24
color.g              = 97
color.b              = 5
helptext             = _("\
In addition to being amenable to agriculture, Hills are frequently\
 rich in resources.\
"), _("\
Cities built in hills are at risk of earthquakes, which can interrupt\
 a city's current project.\
")

[terrain_jungle]
name                 = _("Jungle")
graphic              = "jungle"
graphic_alt          = "-"
identifier           = "j"
class                = "Land"
movement_cost        = 2
defense_bonus        = 25
food                 = 1
shield               = 1
trade                = 0
resources            = "resource_gems", "resource_fruit"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "terrain_swamp"
irrigation_food_incr = 0
irrigation_time      = 10
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "terrain_plains"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "terrain_forest"
native_to            = "Land", "Small Land", "Air", "Missile", "Helicopter"
flags                = "CanHaveRiver", "NoPollution"
property_foliage     = 50
property_tropical    = 50
property_wet         = 50
color.r              = 55
color.g              = 156
color.b              = 38
helptext             = _("\
Jungles are densely overgrown, making agriculture somewhat\
 problematic. Big Land units may not move into jungle without\
 a road.\
")

[terrain_mountains]
name                 = _("Mountains")
graphic              = "mountains"
graphic_alt          = "-"
identifier           = "m"
class                = "Land"
movement_cost        = 3
defense_bonus        = 100
food                 = 0
shield               = 1
trade                = 0
resources            = "resource_gold", "resource_iron"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 6
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 10
transform_result     = "no"
transform_time       = 0
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Air", "Missile", "Helicopter"
flags                = "NoCities", "CanHaveRiver"
property_mountainous = 70
color.r              = 129
color.g              = 127
color.b              = 118
helptext             = _("\
Mountains are regions of extreme altitude, making agriculture and\
 trade very difficult.\
"), _("\
Land units that move into mountains can see an extra space, but a\
 fast land unit ending its turn in mountains without a road will start\
 its next turn with one fewer movement point. Big Land units may not\
 move into mountains without a road.\
")

[terrain_plains]
name                 = _("Plains")
graphic              = "plains"
graphic_alt          = "-"
identifier           = "p"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 1
trade                = 0
resources            = "resource_buffalo", "resource_wheat"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "terrain_forest"
mining_shield_incr   = 0
mining_time          = 10
transform_result     = "terrain_grassland"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "terrain_swamp"
warmer_drier_result  = "terrain_desert"
cooler_wetter_result = "terrain_tundra"
cooler_drier_result  = "terrain_desert"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "Starter", "CanHaveRiver"
property_green       = 50
property_temperate   = 50
color.r              = 122
color.g              = 156
color.b              = 46
helptext             = _("\
Plains are very broad, sparse regions, which makes trade slightly\
 inconvenient.\
")

[terrain_swamp]
name                 = _("Swamp")
graphic              = "swamp"
graphic_alt          = "-"
identifier           = "s"
class                = "Land"
movement_cost        = 2
defense_bonus        = 25
food                 = 1
shield               = 0
trade                = 0
resources            = "resource_peat", "resource_spice"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "terrain_grassland"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "terrain_desert"
cooler_wetter_result = "no"
cooler_drier_result  = "terrain_tundra"
native_to            = "Land", "Small Land", "Air", "Missile", "Helicopter"
flags                = "CanHaveRiver"
property_wet         = 100
property_tropical    = 10
property_temperate   = 10
property_cold        = 10
color.r              = 48
color.g              = 85
color.b              = 97
helptext             = _("\
Swamps suffer from an over-abundance of water, making agriculture\
 somewhat problematic. Big Land units may not move in swamps without\
 a road.\
")

[terrain_tundra]
name                 = _("Tundra")
graphic              = "tundra"
graphic_alt          = "-"
identifier           = "t"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 0
resources            = "resource_game", "resource_furs"
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 5
transform_result     = "terrain_plains"
transform_time       = 24
clean_pollution_time = 3
clean_fallout_time   = 3
warmer_wetter_result = "no"
warmer_drier_result  = "terrain_desert"
cooler_wetter_result = "terrain_glacier"
cooler_drier_result  = "no"
native_to            = "Land", "Small Land", "Big Land", "Air", "Missile", "Helicopter"
flags                = "NoBarbs", "CanHaveRiver"
property_cold        = 50
color.r              = 188
color.g              = 188
color.b              = 188
helptext             = _("\
Tundra are broad, cold regions, fit for some agriculture and little\
 else.\
")

; The individual resource types, one per section.
; Roughly sorted by identifier.
; The actual tag used (the * in [resource_*]) must be unique for each resource,
; and may be used in debug output when reading this file.
;
; Notes:
;
; name                 = name as seen by user; if "unused", it is not used,
;                        but is included for conversion and/or the editor.
; graphic              = tag specifying preferred graphic
; graphic_alt	       = tag for alternate garphic if preferred graphic is not 
;		         present; especially if preferred graphic is non-standard, 
;		         this should be a standard tag.  Otherwise can use eg "-" 
;		         for no alternate graphic.
; identifier           = single-character identifier used in savegames.  This
;                        must be unique for each resource, and changing it will
;                        break savegame compatibility.
; food                 = increased food production
; shield               = increased shield production
; trade                = increased trade production

[resource_gold]
name        = _("Gold")
graphic     = "ts.gold"
graphic_alt = "-"
identifier  = "$"
trade       = 6
# glacier, hills, mountains.

[resource_iron]
name        = _("Iron")
graphic     = "ts.iron"
graphic_alt = "-"
identifier  = "/"
shield      = 3
# mountains.

[resource_game]
name        = _("?animals:Game")
graphic     = "ts.tundra_game"
graphic_alt = "-"
identifier  = "e"
food        = 2
shield      = 1
# tundra.

[resource_furs]
name        = _("Furs")
graphic     = "ts.furs"
graphic_alt = "-"
identifier  = "u"
food        = 1
trade       = 3
# tundra-only (beaver pelts).

[resource_coal]
name        = _("Coal")
graphic     = "ts.coal"
graphic_alt = "-"
identifier  = "c"
shield      = 2
# hills.

[resource_fish]
name        = _("Fish")
graphic     = "ts.fish"
graphic_alt = "-"
identifier  = "y"
food        = 2
# ocean.

[resource_fruit]
name        = _("Fruit")
graphic     = "ts.fruit"
graphic_alt = "-"
identifier  = "f"
food        = 3
trade       = 1
# jungle.

[resource_gems]
name        = _("Gems")
graphic     = "ts.gems"
graphic_alt = "-"
identifier  = "g"
trade       = 4
# jungle.

; "h" reserved for strategic horses

[resource_buffalo]
name        = _("Buffalo")
graphic     = "ts.buffalo"
graphic_alt = "-"
identifier  = "b"
shield      = 2
# plains (horses => buffalo => cattle).

[resource_wheat]
name        = _("Wheat")
graphic     = "ts.wheat"
graphic_alt = "-"
identifier  = "j"
food        = 2
# plains.

; "k" reserved for (cane) sugar

; "l" reserved for tobacco

; "m" reserved for marble

[resource_oasis]
name        = _("Oasis")
graphic     = "ts.oasis"
graphic_alt = "-"
identifier  = "o"
food        = 3
# desert.

[resource_peat]
name        = _("Peat")
graphic     = "ts.peat"
graphic_alt = "-"
identifier  = "a"
shield      = 4
# swamp (petroleum => peat => petroleum).

[resource_pheasant]
name        = _("Pheasant")
graphic     = "ts.pheasant"
graphic_alt = "-"
identifier  = "p"
food        = 2
# forest, forested.

; "r" reserved for rubber

[resource_bonus]
name        = _("Resources")
graphic     = "ts.grassland_resources"
graphic_alt = "-"
identifier  = "r"
shield      = 1
# grassland.

[resource_icy_ivory]
name        = _("Ivory")
graphic     = "ts.arctic_ivory"
graphic_alt = "-"
identifier  = "i"
food        = 1
shield      = 1
trade       = 4
# glacier (seals => walrus).

[resource_silk]
name        = _("Silk")
graphic     = "ts.silk"
graphic_alt = "-"
identifier  = "s"
trade       = 3
# forest, wooded.

[resource_spice]
name        = _("Spice")
graphic     = "ts.spice"
graphic_alt = "-"
identifier  = "t"
food        = 1
trade       = 4
# swamp-only.

; "u" reserved for uranium

[resource_whales]
name        = _("Whales")
graphic     = "ts.whales"
graphic_alt = "-"
identifier  = "v"
food        = 1
shield      = 1
# ocean (sea).

[resource_wine]
name        = _("Wine")
graphic     = "ts.wine"
graphic_alt = "-"
identifier  = "w"
trade       = 4
# hills-only.

[resource_oil]
name        = _("Oil")
graphic     = "ts.oil"
graphic_alt = "-"
identifier  = "x"
shield      = 3 ; glacier used to have 4
# glacier, desert

; /* <-- avoid gettext warnings
;
; Base types:
;
; name                    = translatable name as seen by user
; rule_name               = (optional) name for savegames, rulesets etc; if not
;                           present, 'name' is used. Since the name used in
;                           savegames must not change, use this when renaming a
;                           base after a ruleset has been released.
; buildable               = Can base be built? Defaults to TRUE
; pillageable             = Can base be pillaged? Defaults to TRUE
; graphic                 = tag specifying preferred graphic
; graphic_alt             = tag for alternate graphic if preferred graphic is
;                           not present. Can use eg "-" for no alternate
;                           graphic
; activity_gfx            = tag specifying graphic for unit building base
; act_gfx_alt             = tag for alternative graphic for unit building base
; reqs                    = requirements to build the base (see effects.ruleset
;                           and README.effects for help on requirements)
; gui_type                = how gui should handle this base.
;                           Value can be "Fortress", "Airbase", or "Other"
; build_time              = how long it takes a unit to build this base.
;                           Value of 0 (default) means that terrain-specific
;                           base_time is used instead.
; defense_bonus           = Percent added to defense
; border_sq               = Base will claim land ownership up to this radius,
;                           -1 to disable. If enabled, base cannot exist in city tile.
; vision_main_sq          = Base will have main layer vision to this radius
; vision_invis_sq         = Base will have invisible layer vision to this radius
; conflicts               = List of bases that cannot be on the same tile.
;                           Bases with non-zero border_sq automatically conflict
;                           with each other.
; native_to               = List of unit classes that are considered to
;                           be inside the base when they are on same tile
; flags
;   - "NoAggressive"      = Units inside are not considered aggressive if there`s
;                           friendly city within 3 tiles
;   - "NoStackDeath"      = Units inside do not die all at once when attacked
;   - "DiplomatDefense"   = Diplomats inside get bonus to diplomatic defense
;   - "ParadropFrom"      = Paradrop can be initiated from base
;   - "NativeTile"        = Native units consider tile native regardless of
;                           terrain
;   - "ShowFlag"          = Draw owner's flag
;   - "AlwaysOnCityCenter" = City center tiles always have this base type
;                           regardless of its other requirements
;   - "AutoOnCityCenter"  = City center tiles will automatically have this
;                           base type if the player can build it
; helptext                = optional help text string; should escape all raw
;                           newlines so that xgettext parsing works
;
; */ <-- avoid gettext warnings

[base_fortress]
name           = _("Fortress")
graphic        = "base.fortress"
graphic_alt    = "-"
activity_gfx   = "unit.fortress"
act_gfx_alt    = "-"
reqs           =
    { "type", "name", "range", "negated"
      "Tech", "Construction", "Player", FALSE
      "TerrainClass", "Land", "Local", FALSE
      "UnitFlag", "Settlers", "Local", FALSE
      "UnitClass", "Sea", "Local", TRUE
      "CityTile", "Center", "Local", TRUE
      "Road", "River", "Local", TRUE
    }
gui_type       = "Fortress"
build_time     = 3
border_sq      = -1
conflicts      = "Airbase"
native_to      = "Land", "Small Land", "Big Land"
flags          = "NoAggressive", "NoStackDeath", "DiplomatDefense", "NativeTile"
helptext       = _("\
Units in a fortress receive double defense against land units and boats. \
Any kind of land unit remaining in a fortress for a whole turn without \
moving recovers a quarter of its hit points. With Astronomy, fortresses gain \
watchtowers from which units can see further afield.\
")

[base_airbase]
name           = _("Airbase")
graphic        = "base.airbase"
graphic_alt    = "-"
activity_gfx   = "unit.airbase"
act_gfx_alt    = "-"
reqs           =
    { "type", "name", "range", "negated"
      "Tech", "Radio", "Player", FALSE
      "TerrainClass", "Land", "Local", FALSE
      "UnitFlag", "Airbase", "Local", FALSE
      "CityTile", "Center", "Local", TRUE
      "Road", "River", "Local", TRUE
    }
gui_type       = "Airbase"
build_time     = 3
border_sq      = -1
conflicts      = "Fortress"
native_to      = "Air", "Helicopter", "Missile"
flags          = "NoAggressive", "NoStackDeath", "ParadropFrom"
helptext       = _("\
Airbases allow your air units to land and refuel. Units in an airbase \
receive double defense against enemy air units. \
An air unit remaining in an airbase for a whole turn without moving \
recovers a quarter of its hit points. \
Air units in an airbase may be attacked by land units.\
")

[base_buoy]
name           = _("Buoy")
graphic        = "base.buoy"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.buoy"
act_gfx_alt    = "unit.fortress"
reqs           =
    { "type", "name", "range", "negated"
      "Tech", "Radio", "Player", FALSE
      "TerrainClass", "Oceanic", "Local", FALSE
      "UnitFlag", "Airbase", "Local", FALSE
      "CityTile", "Center", "Local", TRUE
    }
gui_type       = "Fortress"
build_time     = 3
border_sq      = 0
vision_main_sq = 5
helptext       = _("\
Buoys may be built in the ocean (by units on a sea-going vessel).\
"), _("\
As well as granting vision, a buoy in deep ocean yields a shield \
resource to cities with an Offshore Platform.\
")

[base_ruins]
name           = _("Ruins")
graphic        = "base.ruins"
graphic_alt    = "-"
activity_gfx   = "unit.ruins"
act_gfx_alt    = "unit.fortress"
reqs           =
    { "type", "name", "range", "negated"
      "TerrainClass", "Land", "Local", FALSE
      "CityTile", "Center", "Local", TRUE
    }
buildable      = FALSE
build_time     = 0
gui_type       = "Other"
helptext       = _("\
Ruins mark the former site of a city that was destroyed or abandoned. \
They have no effect on gameplay.\
")


; /* <-- avoid gettext warnings
;
; Road types:
;
; name                    = translatable name as seen by user
; rule_name               = (optional) name for savegames, rulesets etc; if not
;                           present, 'name' is used. Since the name used in
;                           savegames must not change, use this when renaming a
;                           road type after a ruleset has been released.
; graphic                 = tag specifying preferred graphic
; graphic_alt             = tag for alternate graphic if preferred graphic is
;                           not present. Can use eg "-" for no alternate
;                           graphic.
; activity_gfx            = tag specifying graphic for unit building road
; act_gfx_alt             = tag for alternative graphic for unit building road
; reqs                    = requirements to build the road (see effects.ruleset
;                           and README.effects for help on requirements)
; move_cost               = how much movement it takes to travel
;                           via this road (in fractional move points, as
;                           defined by move_fragments)
; move_mode               = how movement costs are applied
;   - "NoBonus"    = Road gives no movement bonuses (move_cost ignored)
;   - "Cardinal"   = Road cost applies only on cardinal moves
;   - "Relaxed"    = Road cost is normal for cardinal, double for diagonal moves
;   - "FastAlways" = Road cost applies always between two tiles with the roads
;                    (default)
; build_time              = how long it takes a unit to build this road.
;                           Value of 0 (default) means that terrain-specific
;                           road_time is used instead.
; defense_bonus           = Percent added to defense; default none
; buildable               = Can road be built? Defaults to TRUE
; pillageable             = Can road be pillaged? Defaults to TRUE
; food_incr_const         = food production added to tile regardless of terrain
; shield_incr_const       = shield production added to tile regardless of
;                           terrain
; trade_incr_const        = trade production added to tile regardless of
;                           terrain
; food_incr               = food production added to tile; multiplied by
;                           terrain-specific road_food_incr_pct
; shield_incr             = shield production added to tile; multiplied by
;                           terrain-specific road_shield_incr_pct
; trade_incr              = trade production added to tile; multiplied by
;                           terrain-specific road_trade_incr_pct
; food_bonus              = percent added to food production
; shield_bonus            = percent added to shield production
; trade_bonus             = percent added to trade production
;   In summary, output bonuses from roads are given by the formula:
;   (base_prod + roads.incr_const + roads.incr*terrain.incr_pct) * roads.bonus
; compat_special          = what kind of pre-2.5 special this road corresponds
;                           to, if any: "Road", "Railroad", "River, or "None".
;                           Used for UI and loading old savegames
; native_to               = list of unit classes that can use this road
; hidden_by               = list of road types that will make this road
;                           type not to show on UI if both present
; flags
;   - "NativeTile"        = Native units consider tile native regardless of
;                           terrain
;   - "RequiresBridge"    = Technology with "Bridge" flag needed to build this
;                           road on the same tile as another road with
;                           "PreventsOtherRoads" flag (usually rivers)
;   - "PreventsOtherRoads" = Prevents "RequiresBridge" roads being built on
;                           the same tile as this one without appropriate tech
;   - "River"             = Automatically generated by map generator, always
;                           flowing from land tiles to ocean
;   - "AlwaysOnCityCenter" = City center tiles always have this road type
;                           regardless of its other requirements
;   - "AutoOnCityCenter"  = City center tiles will automatically have this
;                           road type if the player can build it
;   - "UnrestrictedInfra" = Use of the enemy owned road is not restricted
;                           even if server setting 'restrictinfra' is set
;   - "Natural"           = Road is considered part of terrain for UI purposes
;   - "ConnectLand"       = Roads on Oceanic tiles are drawn to connect to
;                           adjacent Land tiles even if they have no road. This
;                           affects appearance only
; helptext                = optional help text string; should escape all raw
;                           newlines so that xgettext parsing works
;
; */ <-- avoid gettext warnings

[road_road]
name           = _("Road")
graphic        = "road.road"
graphic_alt    = "-"
activity_gfx   = "unit.road"
act_gfx_alt    = "-"
reqs           =
    { "type", "name", "range", "negated"
      "UnitFlag", "Settlers", "Local", FALSE
      "UnitClass", "Sea", "Local", TRUE
      "TerrainClass", "Land", "Local", FALSE
    }
move_cost      = 2
build_time     = 0
food_incr      = 0
shield_incr    = 0
trade_incr     = 1
food_bonus     = 0
shield_bonus   = 0
trade_bonus    = 0
compat_special = "Road"
native_to      = "Land", "Small Land", "Big Land", "Merchant"
hidden_by      = "Railroad"
flags          = "RequiresBridge", "NativeTile", "AutoOnCityCenter"
helptext       = _("\
Roads allow your land units to move more quickly, allow wheeled\
 Big Land units such as Chariots and Catapults to travel through\
 otherwise difficult terrain (Mountains, Jungle, and Swamp), and\
 Merchant units (Caravans and Freight) can only travel on roads,\
 railroads, rivers or ships.\
"), _("\
On some terrains, roads also provide a trade bonus.\
"), _("\
Building roads on river tiles requires knowledge of Bridge Building.\
 City center tiles automatically get roads (unless they are on a river\
 tile and you do not yet know Bridge Building).\
")

[road_railroad]
name           = _("Railroad")
graphic        = "road.rail"
graphic_alt    = "-"
activity_gfx   = "unit.rail"
act_gfx_alt    = "unit.road"
reqs           =
    { "type", "name", "range", "negated"
      "Tech", "Railroad", "Player", FALSE
      "Road", "Road", "Local", FALSE
      "UnitFlag", "Settlers", "Local", FALSE
      "UnitClass", "Sea", "Local", TRUE
      "TerrainClass", "Land", "Local", FALSE
    }
move_cost      = 1
build_time     = 3
food_incr      = 0
shield_incr    = 0
trade_incr     = 0
food_bonus     = 0
shield_bonus   = 50
trade_bonus    = 0
compat_special = "Railroad"
native_to      = "Land", "Small Land", "Big Land", "Merchant"
flags          = "RequiresBridge", "NativeTile", "AutoOnCityCenter"
helptext       = _("\
Once you learn the Railroad technology, you may upgrade your roads\
 to railroads. Units travel considerably faster along railroads than\
 along roads.\
"), _("\
A railroad also increases any shield resources produced by a tile.\
 A tile whose road is upgraded to a railroad retains any trade bonus\
 from the road as well.\
"), _("\
City center tiles with roads are automatically upgraded to railroads\
 when you learn the Railroad technology.\
")

[road_river]
name           = _("River")
graphic        = "road.river"
graphic_alt    = "-"
activity_gfx   = "unit.rail"
act_gfx_alt    = "unit.road"
buildable      = FALSE
pillageable    = FALSE
defense_bonus  = 25
move_cost      = 2
move_mode      = "Cardinal"
trade_incr_const = 1
compat_special = "River"
native_to      = "Land", "Small Land", "Merchant", "Trireme"
flags          = "River", "PreventsOtherRoads", "NativeTile", "Natural"
; /* xgettext:no-c-format */
helptext       = _("\
Any land terrain type may have a River on it. A River adds 1\
 trade to the resources produced by that tile. It also increases a\
 tile's defense factor by 25%.\
"), _("\
Land units may move along rivers for faster travel (but not diagonally),\
 and Merchant units (Caravans and Freight) may require rivers to travel\
 along in the absence of roads. Triremes may also travel up rivers\
 (although later boats cannot).\
"), _("\
Roads and railroads can only be built on River tiles if your\
 civilization has learned Bridge Building technology. Fortresses and\
 Airbases cannot be built on River tiles.\
"), _("\
Cities built on or next to rivers incur a small risk of flooding,\
 which will destroy stored food.\
")
